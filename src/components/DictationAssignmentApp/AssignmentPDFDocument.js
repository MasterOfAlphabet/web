import React from 'react';
import { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';

// Add this function at the top of the file
const formatTimeForPDF = (milliseconds) => {
  if (!milliseconds && milliseconds !== 0) return "";
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
};

// Create styles
const styles = StyleSheet.create({
  page: {
    padding: 40,
    fontFamily: 'Helvetica'
  },
  header: {
    marginBottom: 20,
    borderBottomWidth: 2,
    borderBottomColor: '#3b82f6',
    paddingBottom: 10
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#3b82f6',
    marginBottom: 5
  },
  subtitle: {
    fontSize: 12,
    color: '#666',
    marginBottom: 10
  },
  section: {
    marginBottom: 15
  },
  questionHeader: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333'
  },
  questionText: {
    fontSize: 12,
    marginBottom: 8,
    lineHeight: 1.5
  },
  answerText: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
    marginBottom: 5
  },
  statsContainer: {
    marginTop: 20,
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#ddd'
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5
  },
  statsLabel: {
    fontSize: 10,
    color: '#666'
  },
  statsValue: {
    fontSize: 10,
    fontWeight: 'bold'
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    fontSize: 10,
    textAlign: 'center',
    color: '#999'
  }
});

export const AssignmentPDFDocument = ({ questions, stats }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <View style={styles.header}>
        <Text style={styles.title}>Dictation Assignment Report</Text>
        <Text style={styles.subtitle}>
          Completed on {new Date().toLocaleDateString()} at {new Date().toLocaleTimeString()}
        </Text>
      </View>

      {questions.map((question, index) => (
        <View key={index} style={styles.section} wrap={false}>
          <Text style={styles.questionHeader}>
            Question {question.number} ({question.difficulty})
          </Text>
          <Text style={styles.questionText}>{question.text}</Text>
          <Text style={styles.answerText}>
            Answer: {question.answer.textAnswer ? question.answer.textAnswer : "No answer submitted"}
          </Text>
          {question.answer.audioUrl && question.answer.duration != null && (
            <Text style={styles.answerText}>
              Audio Response Duration: {formatTimeForPDF(question.answer.duration)}
            </Text>
          )}
          {question.answer.timestamp && (
            <Text style={styles.answerText}>
              Submitted at: {new Date(question.answer.timestamp).toLocaleString()}
            </Text>
          )}
        </View>
      ))}

      {stats && (
        <View style={styles.statsContainer}>
          <Text style={{...styles.questionHeader, marginBottom: 10}}>Session Statistics</Text>
          <View style={styles.statsRow}>
            <Text style={styles.statsLabel}>Total Questions Attempted:</Text>
            <Text style={styles.statsValue}>{stats.totalQuestions}</Text>
          </View>
          <View style={styles.statsRow}>
            <Text style={styles.statsLabel}>Total Session Time:</Text>
            <Text style={styles.statsValue}>{formatTimeForPDF(stats.totalSessionTime)}</Text>
          </View>
          <View style={styles.statsRow}>
            <Text style={styles.statsLabel}>Average Time per Question:</Text>
            <Text style={styles.statsValue}>{formatTimeForPDF(stats.averageTimePerQuestion)}</Text>
          </View>
        </View>
      )}

      <View style={styles.footer}>
        <Text>Generated by Dictation Master - {new Date().getFullYear()}</Text>
      </View>
    </Page>
  </Document>
);