import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { doc, onSnapshot, updateDoc, deleteDoc } from "firebase/firestore";
import { signInAnonymously } from "firebase/auth";
import { firestore, auth } from "../services/firebase";
import { FaUsers, FaClock, FaShare, FaTrophy, FaShieldAlt } from "react-icons/fa";
import { IoMdClose } from "react-icons/io";

export default function Battle() {
  const { battleId } = useParams();
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [name, setName] = useState("");
  const [battle, setBattle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [hasJoined, setHasJoined] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);
  const [showShareModal, setShowShareModal] = useState(false);

  // 1. Authenticate user
  useEffect(() => {
    signInAnonymously(auth)
      .then((res) => setUser(res.user))
      .catch(console.error);
  }, []);

  // 2. Load battle data and handle timer
  useEffect(() => {
    if (!battleId || !user) return;

    const battleRef = doc(firestore, "battles", battleId);
    const unsubscribe = onSnapshot(battleRef, (doc) => {
      if (!doc.exists()) {
        console.log("Battle no longer exists");
        navigate("/");
        return;
      }

      const data = doc.data();
      setBattle({ id: doc.id, ...data });
      setLoading(false);

      // Check if user has joined
      if (data.players?.some(p => p.id === user.uid)) {
        setHasJoined(true);
      }

      // Calculate time remaining
      if (data.createdAt?.toDate) {
        const endTime = data.createdAt.toDate().getTime() + (5 * 60 * 1000); // 5 minutes to join
        const now = Date.now();
        const diff = Math.max(0, endTime - now);
        setTimeLeft(Math.floor(diff / 1000));

        // Auto-cancel if time runs out
        if (diff <= 0 && data.status === "waiting") {
          cancelBattle();
        }
      }
    });

    return () => unsubscribe();
  }, [battleId, user, navigate]);

  const joinBattle = async () => {
    if (!name || !user || !battle) return;

    try {
      await updateDoc(doc(firestore, "battles", battleId), {
        players: [...battle.players, { id: user.uid, name }],
        [`scores.${user.uid}`]: 0,
        status: battle.players.length >= 1 ? "ongoing" : "waiting",
      });
      setHasJoined(true);
    } catch (error) {
      console.error("Error joining battle:", error);
    }
  };

  const cancelBattle = async () => {
    try {
      await deleteDoc(doc(firestore, "battles", battleId));
      navigate("/");
    } catch (error) {
      console.error("Error canceling battle:", error);
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const copyShareLink = () => {
    navigator.clipboard.writeText(`${window.location.origin}/battle/${battleId}`);
    setShowShareModal(true);
    setTimeout(() => setShowShareModal(false), 2000);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="text-xl">Loading battle...</div>
      </div>
    );
  }

  if (!hasJoined) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
        <div className="w-full max-w-md bg-white rounded-2xl shadow-xl overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
            <h1 className="text-2xl font-bold">Join Battle</h1>
            <div className="flex items-center gap-2 mt-2">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-sm">LIVE - {battle?.module || "Language Battle"}</span>
            </div>
          </div>

          {/* Battle Info */}
          <div className="p-6">
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="flex items-center gap-2 text-blue-600">
                  <FaUsers />
                  <span className="font-semibold">Players</span>
                </div>
                <div className="text-2xl font-bold mt-1">
                  {battle?.players?.length || 0}/{battle?.maxPlayers || 5}
                </div>
              </div>

              <div className="bg-orange-50 p-4 rounded-lg">
                <div className="flex items-center gap-2 text-orange-600">
                  <FaClock />
                  <span className="font-semibold">Time Left</span>
                </div>
                <div className="text-2xl font-bold mt-1">
                  {formatTime(timeLeft)}
                </div>
              </div>
            </div>

            {/* Player List */}
            <div className="mb-6">
              <h3 className="font-semibold mb-2">Current Players:</h3>
              <div className="space-y-2">
                {battle?.players?.map(player => (
                  <div key={player.id} className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                    <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
                      {player.name.charAt(0).toUpperCase()}
                    </div>
                    <span>{player.name}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Join Form */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-1">Your Name</label>
              <input
                type="text"
                className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="Enter your name"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>

            {/* Action Buttons */}
            <div className="flex gap-3">
              <button
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium"
                onClick={joinBattle}
                disabled={!name}
              >
                Join Now
              </button>
              <button
                className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg font-medium flex items-center gap-2"
                onClick={copyShareLink}
              >
                <FaShare /> Invite
              </button>
            </div>

            {/* Battle Rules */}
            <div className="mt-8 pt-6 border-t">
              <h3 className="flex items-center gap-2 text-lg font-semibold mb-3">
                <FaShieldAlt className="text-blue-500" /> Battle Rules
              </h3>
              <ul className="space-y-2 text-sm text-gray-600">
                <li className="flex items-start gap-2">
                  <span className="text-blue-500">•</span> Battle starts when 2+ players join
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500">•</span> 15 seconds per question
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500">•</span> Correct answers earn points
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-blue-500">•</span> Fast answers get bonus points
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* Share Modal */}
        {showShareModal && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 max-w-sm mx-4 relative">
              <button 
                className="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
                onClick={() => setShowShareModal(false)}
              >
                <IoMdClose size={20} />
              </button>
              <div className="text-center">
                <FaShare className="text-blue-500 text-4xl mx-auto mb-3" />
                <h3 className="text-lg font-semibold mb-2">Link Copied!</h3>
                <p className="text-gray-600">Share this link with friends</p>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // ... rest of your battle component (questions, results, etc.)
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
      <div className="text-xl">Battle in progress...</div>
    </div>
  );
}